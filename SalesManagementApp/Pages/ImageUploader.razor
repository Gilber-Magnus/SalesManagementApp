@page "/imageuploader"
@using SalesManagementApp.Services;
  @using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.Spinner

@inject IEmployeeManagementService EmployeeManagementService

<h3 class="mb-4">Employee Management</h3>

<div style="max-width:1100px"> 
     <SfGrid @ref="SfEmployeeGrid" DataSource="employeeData" AllowGrouping="true" AllowPaging="true" AllowFiltering="true" AllowExcelExport ="true" Toolbar="@toolbar">
         <GridEditSettings Mode = "EditMode.Dialog" AllowEditing="true" AllowAdding="true" AllowDeleting="true">
             <HeaderTemplate>
                 <span>@(GetDialogHeaderText(context as EmployeeModel))</span>
             </HeaderTemplate>

             @* <FooterTemplate>
                <SfButton OnClick="@Save" IsPrimary="true"> @DialogButtonCaption</SfButton>
                 <SfButton OnClick = "@Cancel">Cancel> </SfButton>
             </FooterTemplate>
 *@
                 <FooterTemplate>
                     <SfButton OnClick="@Save" IsPrimary = "true">@DialogButtonCaption</SfButton>
                     <SfButton OnClick="@Cancel">Cancel</SfButton>
                 </FooterTemplate>
         </GridEditSettings>
         <GridPageSettings PageSize="5"></GridPageSettings>
         <GridFilterSettings Type = "Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
         <GridEvents OnBatchSave="OnBatchUpdateHandler" CommandClicked = "OnCommandClicked" OnToolbarClick="ToolbarBtnClickHandler" OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler" TValue="EmployeeModel"> </GridEvents>


         <GridColumns>
        // <GridColumn AllowAdding = "false" AllowEditing = "false" IsPrimaryKey="true" Field="@nameof(EmployeeModel.Id)" Width="50px"></GridColumn>
            <GridColumn AllowAdding="false" AllowEditing = "false" HeaderText="Profile" Width="120px">
             <Template>
                 @{
                   var employee = (context as EmployeeModel).ImagePath;
                   <div class=" profile-image-container">
                   <img src="@employee?"/>
                   </div>
                 }   
             </Template>
             <EditTemplate>
                <SfUploader ID="uploadFiles" AllowedExtensions=".jpg,.png,.jpeg" Multiple="false">
                    <UploaderEvents FileSelected="Selected" ValueChange="OnChange"></UploaderEvents>
                </SfUploader>
            </EditTemplate>
         </GridColumn>
         <GridColumn HeaderText="First Name" Field="@nameof(EmployeeModel.FirstName)" Width="120px"></GridColumn>
         <GridColumn HeaderText="Last Name" Field="@nameof(EmployeeModel.LastName)" Width="120px"></GridColumn>
         <GridForeignColumn HeaderText="Designation" TValue="EmployeeJobTitle" Field="@nameof(EmployeeModel.EmployeeJobTitleId)"
                                        ForeignDataSource="employeeJobTitleData"
                                        ForeignKeyValue="Name" Width="100px">                      
                 <EditTemplate>
                     <SfDropDownList @bind-value ="@((context as EmployeeModel).EmployeeJobTitleId)"
                                               ID="EmployeeJobTitleId"
                                               DataSource="employeeJobTitleData" TItem="EmployeeJobTitle"
                                               TValue="int">

                      <DropDownListFieldSettings Text="Name" Value="EmployeeJobTitleId">
                      </DropDownListFieldSettings>

                     </SfDropDownList>
                 </EditTemplate>

         </GridForeignColumn>
         <GridColumn Field="@nameof(EmployeeModel.Gender)" Width="100px">
             <EditTemplate>
                 <SfDropDownList DataSource="genderCollection" TValue="string" TItem="string" @bind-value ="@((context as EmployeeModel).Gender)">
                 </SfDropDownList>
             </EditTemplate>
             </GridColumn>
             <GridColumn Field="@nameof(EmployeeModel.Email)" Width="170px">
          </GridColumn>
         
         <GridColumn HeaderText="Date Of Birth" Field="@nameof(EmployeeModel.DateOfBirth)" Format="d"></GridColumn>
           
         <GridForeignColumn HeaderText="Reports To" TValue="ReportToModel" Field="@nameof(EmployeeModel.ReportToEmpId)"
                               ForeignDataSource="reportToEmployeeData"
                               ForeignKeyValue="ReportToName" Width="120px">
                <EditTemplate>
                    <SfDropDownList @bind-value="@((context as EmployeeModel).ReportToEmpId)"
                                    ID="ReportToEmpId"
                                    DataSource="reportToEmployeeData" TItem="ReportToModel"
                                    TValue="Nullable<int>">

                        <DropDownListFieldSettings Text="ReportToName" Value="ReportToEmpId">
                        </DropDownListFieldSettings>

                    </SfDropDownList>
                </EditTemplate>

            </GridForeignColumn>
            <GridColumn HeaderText="Operations" Width="110px">
                <GridCommandColumns>
                    <GridCommandColumn Type = "CommandButtonType.Edit"
                                 ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-edit",
                                                CssClass = "e-flat"
                                                })">

                    </GridCommandColumn>

                    <GridCommandColumn Type="CommandButtonType.Delete"
                                       ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-delete",
                                                CssClass = "e-flat"
                                                })">

                    </GridCommandColumn>

                    <GridCommandColumn Type = "CommandButtonType.Save"
                                 ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-update",
                                                CssClass = "e-flat"
                                                })">

                    </GridCommandColumn>

                    <GridCommandColumn Type="CommandButtonType.Cancel"
                                       ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-cancel",
                                                CssClass = "e-flat"
                                                })">

                    </GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
            
            <GridColumn HeaderText="Custom Operations" Width="110">
                <GridCommandColumns>
                                    <GridCommandColumn 
                                   ButtonOption="@(new CommandButtonOptions(){
                                                  Content = "01",
                                                  CssClass = "e-outline"

                                                })">
                                   </GridCommandColumn>
                                   <GridCommandColumn
                                   ButtonOption="@(new CommandButtonOptions(){
                                                  Content = "02",
                                                  CssClass = "e-outline"

                                                })">
                                   </GridCommandColumn>
             </GridCommandColumns>

            </GridColumn>
         @* <GridColumn HeaderText="Reports" Field="@nameof(EmployeeModel.ReportToEmpId)" Width="100px"></GridColumn> *@
         </GridColumns>
         <SfSpinner @bind-Visible ="@VisibleProp"> 

         </SfSpinner>
     </SfGrid>
</div>
<style>
    .profile-image-container
    {
      width: 80px;
      height: 80px;
    }

    .profile-image-container img
    {
      width: 100%;
      height: 100%;
      border-radius: 50px;
    }

</style>
@code {

    private enum GenderVal
    {  
        Male,
        Female
    }
    public string UploadedFile { get; set; }
    private string DialogButtonCaption { get; set; }
    private SfGrid<EmployeeModel>? SfEmployeeGrid { get; set; }
    private bool VisibleProp { get; set; } = false;
    private string[] genderCollection = Enum.GetNames(typeof(GenderVal));
    private List<EmployeeModel>? employeeData = null;
    private List<EmployeeJobTitle>? employeeJobTitleData;
    private List<ReportToModel>? reportToEmployeeData;
    // private List<object> toolbar = new List<object> {"Add", "Edit", "Delete", "Update","Cancel", "Search", "ExcelExport","PdfExport",
    //                                                  new ItemModel(){Text = "XML Export",TooltipText="Export Data to XML",
    //                                                  PrefixIcon = "ë-click", Id = "xmlExport"} };
    private List<object> toolbar = new List<object> {"Add", "Search", "Update", "Cancel", "ExcelExport","PdfExport",
                                                     new ItemModel(){Text = "XML Export",TooltipText="Export Data to XML",
                                                     PrefixIcon = "ë-click", Id = "xmlExport"} };


    //Gets Data from for ex. a database or a service
    public void Selected(SelectedEventArgs Args)
    {
        UploadedFile = Args.FilesData[0].Name;
    }

    public void OnChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            var size = file.FileInfo.Size;
            var path = @"./wwwroot/Images/Profile/" + file.FileInfo.Name;
            ////var path = @"D:\Blazor-New\Support\I313934\BlazorApp1\BlazorApp1\wwwroot\scripts\Images\Employees\" + file.FileInfo.Name;
            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
            file.Stream.WriteTo(filestream);
            filestream.Close();
            file.Stream.Close();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        VisibleProp = true;
        employeeData = await EmployeeManagementService.GetEmployees();
        employeeJobTitleData = await EmployeeManagementService.GetJobTitles();
        reportToEmployeeData = await EmployeeManagementService.GetReportToEmployees();
        //ImagePath = "Images/Profile/" + ".png";

        //simulation of latency- to show delay in retrieval
        //await Task.Delay(2000);
        VisibleProp = false;
    }

    public async void ActionBeginHandler(ActionEventArgs<EmployeeModel>args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if(args.Action == "Add")
            {
                await EmployeeManagementService.AddEmployee(args.Data);
                args.Data.ImagePath = "Images/Profile/" + UploadedFile;
            }
            else if(args.Action == "Edit")
            {
                await EmployeeManagementService.UpdateEmployee(args.Data);
                args.Data.ImagePath = "Images/Profile/" + UploadedFile;

            }
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await EmployeeManagementService.DeleteEmployee(args.Data.Id);
        }
        // //new code
        // if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save && args.Action == "Add")
        // {
        //     //Args.Data.OrderID = DefaultValue++;    //set the default value while adding.
        //     //save the file name / url in grid datasource. You can generate the byte and store here.
        //     args.Data.ImagePath = "Images/Profile/" + UploadedFile;
        // }
        // else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save && args.Action == "Edit")
        // {
        //     //save the file name / url in grid datasource. You can generate the byte and store here.
        //     args.Data.ImagePath = "Images/Profile/" + UploadedFile;
        // }
    }

    public async void ActionCompleteHandler(ActionEventArgs<EmployeeModel>args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                employeeData = await EmployeeManagementService.GetEmployees();
                SfEmployeeGrid?.Refresh();
            }
        }
    }
    public async void ToolbarBtnClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id.Contains("_excelexport"))
        {
            await SfEmployeeGrid?.ExportToExcelAsync();
        }
        else if(args.Item.Id.Contains("_pdfexport"))
        {
            await SfEmployeeGrid?.ExportToPdfAsync();
        }
        else if (args.Item.Id =="XmlExport")
        {
            Console.Write("Export to Xml functionality");
        }
    }public async void OnCommandClicked (CommandClickEventArgs<EmployeeModel> args)
    {
        if(args.CommandColumn.ButtonOption.Content == "01")
        {
            Console.Write("Custom Operation 1");
        }
        else if (args.CommandColumn.ButtonOption.Content == "02")
        {
            Console.Write("Custom Operation 2");
        }
    }

    private string GetDialogHeaderText(EmployeeModel employeeModel)
    {
        if(employeeModel.Id ==0)
        {
            DialogButtonCaption = "Add";
            return "Add Employee";
        }
        else
        {
            DialogButtonCaption = "Update"; 
            return $"Edit Details: {employeeModel.FirstName} {employeeModel.LastName}"; 
        }
    }
    private async Task Cancel()
    {
        await SfEmployeeGrid.CloseEditAsync();
    }
    private async Task Save()
    {
        await SfEmployeeGrid.EndEditAsync();
    }

    public async Task OnBatchUpdateHandler(BeforeBatchSaveArgs<EmployeeModel> args)
    {
        var addedRecords = args.BatchChanges.AddedRecords;
        var updatedRecords = args.BatchChanges.ChangedRecords;
        var deletedRecords = args.BatchChanges.DeletedRecords;

        foreach(EmployeeModel employee in addedRecords)
        {
            await EmployeeManagementService.AddEmployee(employee);
        }
        foreach(EmployeeModel employee in updatedRecords)
        {
            await EmployeeManagementService.UpdateEmployee(employee);
        }
        foreach (EmployeeModel employee in deletedRecords)
        {
            await EmployeeManagementService.DeleteEmployee(employee.Id);
        }

    }
   }